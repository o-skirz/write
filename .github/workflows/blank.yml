<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NoteFlow - Your Notes Everywhere</title>
    <style>
        :root {
            --background-dark: #121212;
            --surface-dark: #1e1e1e;
            --text-primary-dark: #e0e0e0;
            --text-secondary-dark: #a0a0a0;
            --primary-color: #bb86fc;
            --secondary-color: #03dac6;
            --error-color: #cf6679;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            background-color: var(--background-dark);
            color: var(--text-primary-dark);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
        }

        #noteEditor {
            width: 100%;
            min-height: 500px;
            background-color: var(--surface-dark);
            color: var(--text-primary-dark);
            border: 1px solid #333;
            border-radius: 8px;
            padding: 20px;
            font-size: 16px;
            resize: vertical;
        }

        .sync-status {
            text-align: center;
            padding: 10px;
            font-size: 0.9em;
            color: var(--text-secondary-dark);
        }

        .btn {
            background-color: var(--primary-color);
            color: var(--background-dark);
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 10px;
        }

        .notes-list {
            max-height: 600px;
            overflow-y: auto;
            background-color: var(--surface-dark);
            border-radius: 8px;
            padding: 10px;
        }

        .note-item {
            background-color: var(--background-dark);
            border: 1px solid #333;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="sync-status" id="syncStatus">Syncing...</div>
    
    <div class="container">
        <div>
            <textarea id="noteEditor" placeholder="Start writing your note here..."></textarea>
            <div>
                <button onclick="saveNote()" class="btn">Save Note</button>
                <button onclick="clearEditor()" class="btn">Clear</button>
            </div>
        </div>
        
        <div class="notes-list" id="notesList">
            <!-- Notes will be dynamically populated here -->
        </div>
    </div>

    <script>
    class NoteManager {
        constructor() {
            // Use unique device ID for sync
            this.deviceId = this.getOrCreateDeviceId();
            
            // Cloud sync simulation (replace with actual backend in real implementation)
            this.cloudSyncKey = 'noteflow_cloud_sync';
            
            // Initialize notes
            this.notes = this.loadNotes();
            
            // Setup auto-save and sync
            this.setupAutoSave();
            this.setupCloudSync();
            
            // Render notes
            this.renderNotes();
        }

        getOrCreateDeviceId() {
            // Generate or retrieve a unique device identifier
            let deviceId = localStorage.getItem('noteflow_device_id');
            if (!deviceId) {
                deviceId = 'device_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('noteflow_device_id', deviceId);
            }
            return deviceId;
        }

        loadNotes() {
            // Load notes from local storage with cloud sync
            const localNotes = JSON.parse(localStorage.getItem('noteflow_notes') || '[]');
            const cloudSync = this.getCloudSync();
            
            // Merge local and cloud notes, prioritizing newer entries
            const mergedNotes = this.mergeNotes(localNotes, cloudSync);
            
            // Sort by timestamp
            return mergedNotes.sort((a, b) => b.timestamp - a.timestamp).slice(0, 100);
        }

        mergeNotes(localNotes, cloudNotes) {
            const noteMap = new Map();

            // Add cloud notes first
            cloudNotes.forEach(note => {
                if (!noteMap.has(note.id) || note.timestamp > (noteMap.get(note.id)?.timestamp || 0)) {
                    noteMap.set(note.id, note);
                }
            });

            // Add or update with local notes
            localNotes.forEach(note => {
                if (!noteMap.has(note.id) || note.timestamp > (noteMap.get(note.id)?.timestamp || 0)) {
                    noteMap.set(note.id, note);
                }
            });

            return Array.from(noteMap.values());
        }

        setupAutoSave() {
            const editor = document.getElementById('noteEditor');
            let saveTimeout;

            editor.addEventListener('input', () => {
                if (saveTimeout) clearTimeout(saveTimeout);
                
                saveTimeout = setTimeout(() => {
                    this.autoSave(editor.value);
                }, 2000);
            });

            // Restore last edited note on page load
            const lastNote = localStorage.getItem('noteflow_current_note');
            if (lastNote) {
                editor.value = lastNote;
            }
        }

        setupCloudSync() {
            // Periodic sync (simulated)
            setInterval(() => this.syncWithCloud(), 30000);

            // Sync on page load and before page unload
            this.syncWithCloud();
            window.addEventListener('beforeunload', () => this.syncWithCloud());
        }

        autoSave(text) {
            if (!text.trim()) return;

            // Save current note for restoration
            localStorage.setItem('noteflow_current_note', text);

            // Create note object
            const note = {
                id: `note_${Date.now()}_${this.deviceId}`,
                text: text,
                timestamp: Date.now(),
                deviceId: this.deviceId
            };

            // Add to notes and save
            this.notes.unshift(note);
            this.saveNotes();
        }

        saveNotes() {
            // Limit to 100 most recent notes
            const notesToSave = this.notes.slice(0, 100);
            
            // Save to local storage
            localStorage.setItem('noteflow_notes', JSON.stringify(notesToSave));
            
            // Trigger cloud sync
            this.syncWithCloud();
            
            // Render notes
            this.renderNotes();
        }

        syncWithCloud() {
            try {
                // Simulate cloud sync (replace with actual backend sync in real app)
                const cloudNotes = this.getCloudSync();
                const mergedNotes = this.mergeNotes(this.notes, cloudNotes);
                
                // Update local and cloud storage
                localStorage.setItem('noteflow_notes', JSON.stringify(mergedNotes));
                this.setCloudSync(mergedNotes);
                
                // Update notes and render
                this.notes = mergedNotes;
                this.renderNotes();
                
                // Update sync status
                const syncStatus = document.getElementById('syncStatus');
                syncStatus.textContent = `Synced at ${new Date().toLocaleTimeString()}`;
                syncStatus.style.color = 'var(--secondary-color)';
                
                setTimeout(() => {
                    syncStatus.textContent = '';
                }, 3000);
            } catch (error) {
                console.error('Sync failed', error);
                const syncStatus = document.getElementById('syncStatus');
                syncStatus.textContent = 'Sync failed';
                syncStatus.style.color = 'var(--error-color)';
            }
        }

        getCloudSync() {
            // Simulated cloud sync using localStorage (replace with actual backend)
            return JSON.parse(localStorage.getItem(this.cloudSyncKey) || '[]');
        }

        setCloudSync(notes) {
            // Simulated cloud sync storage (replace with actual backend)
            localStorage.setItem(this.cloudSyncKey, JSON.stringify(notes));
        }

        renderNotes() {
            const notesList = document.getElementById('notesList');
            
            if (this.notes.length === 0) {
                notesList.innerHTML = '<p style="color: var(--text-secondary-dark); text-align: center;">No notes yet</p>';
                return;
            }

            notesList.innerHTML = this.notes.map(note => `
                <div class="note-item">
                    <small style="color: var(--text-secondary-dark);">
                        ${new Date(note.timestamp).toLocaleString()}
                        ${note.deviceId === this.deviceId ? ' (This Device)' : ''}
                    </small>
                    <p>${note.text.length > 100 ? note.text.substring(0, 100) + '...' : note.text}</p>
                </div>
            `).join('');
        }
    }

    // Initialize the note manager
    const noteManager = new NoteManager();

    // Utility functions
    function saveNote() {
        const editor = document.getElementById('noteEditor');
        if (editor.value.trim()) {
            noteManager.autoSave(editor.value);
            editor.value = '';
        }
    }

    function clearEditor() {
        document.getElementById('noteEditor').value = '';
        localStorage.removeItem('noteflow_current_note');
    }
    </script>
</body>
</html>
